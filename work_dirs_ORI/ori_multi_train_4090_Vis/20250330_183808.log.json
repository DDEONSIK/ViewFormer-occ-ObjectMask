{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.10.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.28.2\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+f38b575\nspconv2.0: False", "config": "point_cloud_range = [-40, -40, -1.0, 40, 40, 5.4]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuSceneOcc'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(\n        type='LoadOccGTFromFile',\n        data_root='data/nuscenes/',\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        with_attr_label=False),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='CustomResizeCropFlipImage',\n        data_aug_conf=dict(\n            resize_lim=(0.386, 0.55),\n            final_dim=(256, 704),\n            bot_pct_lim=(0.0, 0.0),\n            rot_lim=(0.0, 0.0),\n            H=900,\n            W=1600,\n            rand_flip=True),\n        training=True),\n    dict(\n        type='CustomGlobalRotScaleTransImage',\n        flip_hv_ratio=[0.5, 0.5],\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='Collect3D',\n        keys=[\n            'img', 'voxel_semantics', 'mask_lidar', 'mask_camera',\n            'prev_exists'\n        ],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                   'depth2img', 'cam2img', 'pad_shape', 'scale_factor', 'flip',\n                   'pcd_horizontal_flip', 'pcd_vertical_flip', 'box_mode_3d',\n                   'box_type_3d', 'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                   'pcd_scale_factor', 'pcd_rotation', 'pts_filename',\n                   'transformation_3d_flow', 'scene_token', 'can_bus',\n                   'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                   'timestamp', 'img_trans_dict', 'ego_trans_dict',\n                   'cam_intrinsic', 'cam2ego', 'pixel_wise_label'))\n]\ntest_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n    dict(\n        type='CustomResizeCropFlipImage',\n        data_aug_conf=dict(\n            resize_lim=(0.386, 0.55),\n            final_dim=(256, 704),\n            bot_pct_lim=(0.0, 0.0),\n            rot_lim=(0.0, 0.0),\n            H=900,\n            W=1600,\n            rand_flip=True),\n        training=False),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['img'],\n                meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                           'depth2img', 'cam2img', 'pad_shape', 'scale_factor',\n                           'flip', 'pcd_horizontal_flip', 'pcd_vertical_flip',\n                           'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                           'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                           'pcd_rotation', 'pts_filename',\n                           'transformation_3d_flow', 'scene_token', 'can_bus',\n                           'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                           'timestamp', 'img_trans_dict', 'ego_trans_dict'))\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_train.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadOccGTFromFile',\n                data_root='data/nuscenes/',\n                pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=False),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=True),\n            dict(\n                type='CustomGlobalRotScaleTransImage',\n                flip_hv_ratio=[0.5, 0.5],\n                pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=[\n                    'img', 'voxel_semantics', 'mask_lidar', 'mask_camera',\n                    'prev_exists'\n                ],\n                meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                           'depth2img', 'cam2img', 'pad_shape', 'scale_factor',\n                           'flip', 'pcd_horizontal_flip', 'pcd_vertical_flip',\n                           'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                           'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                           'pcd_rotation', 'pts_filename',\n                           'transformation_3d_flow', 'scene_token', 'can_bus',\n                           'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                           'timestamp', 'img_trans_dict', 'ego_trans_dict',\n                           'cam_intrinsic', 'cam2ego', 'pixel_wise_label'))\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True,\n        queue_length=0,\n        num_frame_losses=1,\n        seq_split_num=2,\n        seq_mode=True),\n    val=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=False),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'lidar2img', 'depth2img', 'cam2img',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'pcd_horizontal_flip', 'pcd_vertical_flip',\n                                   'box_mode_3d', 'box_type_3d',\n                                   'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                                   'pcd_scale_factor', 'pcd_rotation',\n                                   'pts_filename', 'transformation_3d_flow',\n                                   'scene_token', 'can_bus', 'ego2lidar',\n                                   'prev_idx', 'next_idx', 'ego2global',\n                                   'timestamp', 'img_trans_dict',\n                                   'ego_trans_dict'))\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        queue_length=0,\n        video_test_mode=True),\n    test=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=False),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'lidar2img', 'depth2img', 'cam2img',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'pcd_horizontal_flip', 'pcd_vertical_flip',\n                                   'box_mode_3d', 'box_type_3d',\n                                   'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                                   'pcd_scale_factor', 'pcd_rotation',\n                                   'pts_filename', 'transformation_3d_flow',\n                                   'scene_token', 'can_bus', 'ego2lidar',\n                                   'prev_idx', 'next_idx', 'ego2global',\n                                   'timestamp', 'img_trans_dict',\n                                   'ego_trans_dict'))\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        queue_length=0,\n        video_test_mode=True),\n    shuffler_sampler=dict(type='InfiniteGroupEachSampleInBatchSampler'),\n    nonshuffler_sampler=dict(type='DistributedSampler'))\nevaluation = dict(\n    interval=1265850,\n    pipeline=[\n        dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n        dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n        dict(\n            type='CustomResizeCropFlipImage',\n            data_aug_conf=dict(\n                resize_lim=(0.386, 0.55),\n                final_dim=(256, 704),\n                bot_pct_lim=(0.0, 0.0),\n                rot_lim=(0.0, 0.0),\n                H=900,\n                W=1600,\n                rand_flip=True),\n            training=False),\n        dict(\n            type='NormalizeMultiviewImage',\n            mean=[123.675, 116.28, 103.53],\n            std=[58.395, 57.12, 57.375],\n            to_rgb=True),\n        dict(type='PadMultiViewImage', size_divisor=32),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1333, 800),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='Collect3D',\n                    keys=['img'],\n                    meta_keys=('filename', 'ori_shape', 'img_shape',\n                               'lidar2img', 'depth2img', 'cam2img',\n                               'pad_shape', 'scale_factor', 'flip',\n                               'pcd_horizontal_flip', 'pcd_vertical_flip',\n                               'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                               'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                               'pcd_rotation', 'pts_filename',\n                               'transformation_3d_flow', 'scene_token',\n                               'can_bus', 'ego2lidar', 'prev_idx', 'next_idx',\n                               'ego2global', 'timestamp', 'img_trans_dict',\n                               'ego_trans_dict'))\n            ])\n    ])\ncheckpoint_config = dict(interval=14065, max_keep_ckpts=1)\nlog_config = dict(\n    interval=1,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/ori_multi_train_4090_Vis'\nload_from = 'ckpts/r50_256x705_depth_pretrain.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nplugin = True\nplugin_dir = 'projects/mmdet3d_plugin/'\nrelative_relo_range = [-18.84, -18.84, -1.05, 18.84, 18.84, 1.05]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\npoint_class_names = [\n    'ignore', 'barrier', 'bicycle', 'bus', 'car', 'construction_vehicle',\n    'motorcycle', 'pedestrian', 'traffic_cone', 'trailer', 'truck',\n    'driveable_surface', 'other_flat', 'sidewalk', 'terrain', 'manmade',\n    'vegetation'\n]\nnum_gpus = 2\nbatch_size = 1\nnum_iters_per_epoch = 14065\nnum_epochs = 90\nbev_h_ = 100\nbev_w_ = 100\nnum_points_in_pillar = 8\nspace_in_shape = [8, 100, 100]\nspace_out_shape = [16, 200, 200]\nnum_cams = 6\nnum_levels = 3\nfinal_dim = (256, 704)\nembed_dims = 72\nnum_heads = 9\nnum_frame_losses = 1\nuse_temporal = True\nqueue_length = 0\nvideo_test_mode = True\nnum_memory = 4\nvoxel2bev = True\nbev_dim = 126\ntime_range = [-2.3, 0.0]\nmodel = dict(\n    type='ViewFormer',\n    use_grid_mask=True,\n    video_test_mode=True,\n    use_temporal=True,\n    num_frame_backbone_grads=1,\n    num_frame_head_grads=1,\n    num_frame_losses=1,\n    depth_supvise=True,\n    img_backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(1, 2, 3),\n        frozen_stages=-1,\n        norm_cfg=dict(type='BN2d', requires_grad=False),\n        norm_eval=True,\n        with_cp=True,\n        style='pytorch'),\n    img_neck=dict(\n        type='FPN',\n        in_channels=[512, 1024, 2048],\n        out_channels=256,\n        num_outs=3,\n        add_extra_convs='on_output',\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='ViewFormerHead',\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n        num_levels=3,\n        final_dim=(256, 704),\n        in_channels=256,\n        bev_h=100,\n        bev_w=100,\n        num_points_in_pillar=8,\n        time_range=[-2.3, 0.0],\n        use_mask_lidar=False,\n        use_mask_camera=True,\n        use_temporal=True,\n        num_memory=4,\n        bev_dim=126,\n        relative_relo_range=[-18.84, -18.84, -1.05, 18.84, 18.84, 1.05],\n        out_space3D_feat=False,\n        space3D_net_cfg=dict(\n            in_channels=72,\n            bev_dim=126,\n            feat_channels=32,\n            in_shape=[8, 100, 100],\n            out_shape=[16, 200, 200],\n            num_classes=18),\n        transformer=dict(\n            type='ViewFormerTransformer',\n            decoder=dict(\n                type='ViewFormerTransformerDecoder',\n                num_layers=4,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='ViewFormerTransformerLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='StreamTemporalAttn',\n                            pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n                            num_levels=4,\n                            embed_dims=126,\n                            num_heads=9,\n                            data_from_dict=True,\n                            voxel2bev=True,\n                            voxel_dim=72,\n                            num_points=4),\n                        dict(\n                            type='ViewAttn',\n                            pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n                            with_ffn=True,\n                            num_levels=3,\n                            embed_dims=72,\n                            num_heads=9,\n                            num_points=1)\n                    ],\n                    operation_order=('cross_attn', 'cross_attn')))),\n        loss_prob=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=3.0),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        loss_lovasz=dict(type='LovaszLoss', loss_weight=1.0)))\nida_aug_conf = dict(\n    resize_lim=(0.386, 0.55),\n    final_dim=(256, 704),\n    bot_pct_lim=(0.0, 0.0),\n    rot_lim=(0.0, 0.0),\n    H=900,\n    W=1600,\n    rand_flip=True)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.25))),\n    weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.1,\n    min_lr_ratio=0.001)\nrunner = dict(type='IterBasedRunner', max_iters=1265850)\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "viewformer_r50_704x256_seq_90e.py"}
{"mode": "train", "epoch": 1, "iter": 1, "lr": 0.0, "memory": 10831, "data_time": 0.41902, "loss_prob": 3.42907, "loss_cls": 2.94574, "loss_lovasz": 0.94167, "d0.loss_v_depth": 1.14422, "d0.loss_v_cls": 1.53692, "d1.loss_v_depth": 1.14804, "d1.loss_v_cls": 1.64073, "loss": 12.7864, "grad_norm": 13.06111, "time": 1.65287}
{"mode": "train", "epoch": 1, "iter": 2, "lr": 1e-05, "memory": 12097, "data_time": 0.00855, "loss_prob": 3.4209, "loss_cls": 2.92421, "loss_lovasz": 0.94142, "d0.loss_v_depth": 1.14099, "d0.loss_v_cls": 1.538, "d1.loss_v_depth": 1.14346, "d1.loss_v_cls": 1.63738, "loss": 12.74635, "grad_norm": 9.32903, "time": 0.51785}
{"mode": "train", "epoch": 1, "iter": 3, "lr": 1e-05, "memory": 12193, "data_time": 0.00453, "loss_prob": 3.40672, "loss_cls": 2.8894, "loss_lovasz": 0.9404, "d0.loss_v_depth": 1.13622, "d0.loss_v_cls": 1.51495, "d1.loss_v_depth": 1.14076, "d1.loss_v_cls": 1.61011, "loss": 12.63857, "grad_norm": 12.72003, "time": 0.50735}
{"mode": "train", "epoch": 1, "iter": 4, "lr": 1e-05, "memory": 12307, "data_time": 0.00649, "loss_prob": 3.39369, "loss_cls": 2.87639, "loss_lovasz": 0.94032, "d0.loss_v_depth": 1.14007, "d0.loss_v_cls": 1.48108, "d1.loss_v_depth": 1.14697, "d1.loss_v_cls": 1.60768, "loss": 12.58619, "grad_norm": 9.12313, "time": 0.50834}
{"mode": "train", "epoch": 1, "iter": 5, "lr": 1e-05, "memory": 12307, "data_time": 0.00619, "loss_prob": 3.38726, "loss_cls": 2.8693, "loss_lovasz": 0.94021, "d0.loss_v_depth": 1.13334, "d0.loss_v_cls": 1.49032, "d1.loss_v_depth": 1.13803, "d1.loss_v_cls": 1.57158, "loss": 12.53004, "grad_norm": 8.93756, "time": 0.50626}
{"mode": "train", "epoch": 1, "iter": 6, "lr": 1e-05, "memory": 12307, "data_time": 0.00803, "loss_prob": 3.37541, "loss_cls": 2.86442, "loss_lovasz": 0.94135, "d0.loss_v_depth": 1.13564, "d0.loss_v_cls": 1.47613, "d1.loss_v_depth": 1.14141, "d1.loss_v_cls": 1.56558, "loss": 12.49995, "grad_norm": 9.01253, "time": 0.51092}
{"mode": "train", "epoch": 1, "iter": 7, "lr": 1e-05, "memory": 12307, "data_time": 0.00446, "loss_prob": 3.36637, "loss_cls": 2.84596, "loss_lovasz": 0.94022, "d0.loss_v_depth": 1.12784, "d0.loss_v_cls": 1.4363, "d1.loss_v_depth": 1.1278, "d1.loss_v_cls": 1.57771, "loss": 12.4222, "grad_norm": 9.43291, "time": 0.50908}
{"mode": "train", "epoch": 1, "iter": 8, "lr": 1e-05, "memory": 12307, "data_time": 0.00625, "loss_prob": 3.35167, "loss_cls": 2.83102, "loss_lovasz": 0.9397, "d0.loss_v_depth": 1.12269, "d0.loss_v_cls": 1.45068, "d1.loss_v_depth": 1.12458, "d1.loss_v_cls": 1.53991, "loss": 12.36025, "grad_norm": 9.65432, "time": 0.50597}
{"mode": "train", "epoch": 1, "iter": 9, "lr": 1e-05, "memory": 12307, "data_time": 0.00647, "loss_prob": 3.34237, "loss_cls": 2.81484, "loss_lovasz": 0.93963, "d0.loss_v_depth": 1.12316, "d0.loss_v_cls": 1.45151, "d1.loss_v_depth": 1.1237, "d1.loss_v_cls": 1.4998, "loss": 12.29501, "grad_norm": 11.19251, "time": 0.50604}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 1e-05, "memory": 12311, "data_time": 0.00624, "loss_prob": 3.33321, "loss_cls": 2.81466, "loss_lovasz": 0.93864, "d0.loss_v_depth": 1.11696, "d0.loss_v_cls": 1.41844, "d1.loss_v_depth": 1.121, "d1.loss_v_cls": 1.52594, "loss": 12.26885, "grad_norm": 8.25027, "time": 0.51213}
{"mode": "train", "epoch": 1, "iter": 11, "lr": 1e-05, "memory": 12311, "data_time": 0.00638, "loss_prob": 3.33098, "loss_cls": 2.80874, "loss_lovasz": 0.93966, "d0.loss_v_depth": 1.11219, "d0.loss_v_cls": 1.42524, "d1.loss_v_depth": 1.1166, "d1.loss_v_cls": 1.48875, "loss": 12.22215, "grad_norm": 8.1778, "time": 0.50889}
{"mode": "train", "epoch": 1, "iter": 12, "lr": 1e-05, "memory": 12311, "data_time": 0.00669, "loss_prob": 3.30783, "loss_cls": 2.78375, "loss_lovasz": 0.9388, "d0.loss_v_depth": 1.10346, "d0.loss_v_cls": 1.42118, "d1.loss_v_depth": 1.11447, "d1.loss_v_cls": 1.47275, "loss": 12.14223, "grad_norm": 8.65698, "time": 0.50564}
{"mode": "train", "epoch": 1, "iter": 13, "lr": 1e-05, "memory": 12311, "data_time": 0.00652, "loss_prob": 3.30753, "loss_cls": 2.78786, "loss_lovasz": 0.93834, "d0.loss_v_depth": 1.10194, "d0.loss_v_cls": 1.41161, "d1.loss_v_depth": 1.11268, "d1.loss_v_cls": 1.46181, "loss": 12.12176, "grad_norm": 7.72068, "time": 0.50772}
{"mode": "train", "epoch": 1, "iter": 14, "lr": 1e-05, "memory": 12311, "data_time": 0.00635, "loss_prob": 3.3062, "loss_cls": 2.77903, "loss_lovasz": 0.93747, "d0.loss_v_depth": 1.09946, "d0.loss_v_cls": 1.36927, "d1.loss_v_depth": 1.10525, "d1.loss_v_cls": 1.46536, "loss": 12.06205, "grad_norm": 9.27317, "time": 0.51028}
{"mode": "train", "epoch": 1, "iter": 15, "lr": 1e-05, "memory": 12311, "data_time": 0.00625, "loss_prob": 3.29823, "loss_cls": 2.77617, "loss_lovasz": 0.93809, "d0.loss_v_depth": 1.09323, "d0.loss_v_cls": 1.38192, "d1.loss_v_depth": 1.1025, "d1.loss_v_cls": 1.43509, "loss": 12.02524, "grad_norm": 8.23476, "time": 0.5053}
{"mode": "train", "epoch": 1, "iter": 16, "lr": 1e-05, "memory": 12311, "data_time": 0.00689, "loss_prob": 3.28927, "loss_cls": 2.76755, "loss_lovasz": 0.93782, "d0.loss_v_depth": 1.0937, "d0.loss_v_cls": 1.38254, "d1.loss_v_depth": 1.10148, "d1.loss_v_cls": 1.42417, "loss": 11.99652, "grad_norm": 7.37439, "time": 0.5042}
{"mode": "train", "epoch": 1, "iter": 17, "lr": 1e-05, "memory": 12311, "data_time": 0.00651, "loss_prob": 3.27754, "loss_cls": 2.7579, "loss_lovasz": 0.93669, "d0.loss_v_depth": 1.0874, "d0.loss_v_cls": 1.33643, "d1.loss_v_depth": 1.0929, "d1.loss_v_cls": 1.42372, "loss": 11.91258, "grad_norm": 8.79033, "time": 0.50727}
{"mode": "train", "epoch": 1, "iter": 18, "lr": 1e-05, "memory": 12316, "data_time": 0.0063, "loss_prob": 3.2696, "loss_cls": 2.75166, "loss_lovasz": 0.93658, "d0.loss_v_depth": 1.08554, "d0.loss_v_cls": 1.3524, "d1.loss_v_depth": 1.09205, "d1.loss_v_cls": 1.39759, "loss": 11.88541, "grad_norm": 7.82392, "time": 0.51171}
{"mode": "train", "epoch": 1, "iter": 19, "lr": 1e-05, "memory": 12316, "data_time": 0.00623, "loss_prob": 3.25866, "loss_cls": 2.75587, "loss_lovasz": 0.93757, "d0.loss_v_depth": 1.09055, "d0.loss_v_cls": 1.34513, "d1.loss_v_depth": 1.09887, "d1.loss_v_cls": 1.39402, "loss": 11.88067, "grad_norm": 6.50723, "time": 0.50467}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 1e-05, "memory": 12316, "data_time": 0.00627, "loss_prob": 3.25424, "loss_cls": 2.74731, "loss_lovasz": 0.93727, "d0.loss_v_depth": 1.09238, "d0.loss_v_cls": 1.33931, "d1.loss_v_depth": 1.09643, "d1.loss_v_cls": 1.39521, "loss": 11.86215, "grad_norm": 6.65541, "time": 0.50645}
{"mode": "train", "epoch": 1, "iter": 21, "lr": 1e-05, "memory": 12316, "data_time": 0.00615, "loss_prob": 3.26682, "loss_cls": 2.7644, "loss_lovasz": 0.93691, "d0.loss_v_depth": 1.10514, "d0.loss_v_cls": 1.31624, "d1.loss_v_depth": 1.10624, "d1.loss_v_cls": 1.37709, "loss": 11.87283, "grad_norm": 7.42335, "time": 0.50357}
{"mode": "train", "epoch": 1, "iter": 22, "lr": 1e-05, "memory": 12316, "data_time": 0.00632, "loss_prob": 3.25926, "loss_cls": 2.7512, "loss_lovasz": 0.93624, "d0.loss_v_depth": 1.09748, "d0.loss_v_cls": 1.31955, "d1.loss_v_depth": 1.09713, "d1.loss_v_cls": 1.36505, "loss": 11.82592, "grad_norm": 7.57372, "time": 0.50599}
{"mode": "train", "epoch": 1, "iter": 23, "lr": 1e-05, "memory": 12316, "data_time": 0.0062, "loss_prob": 3.25467, "loss_cls": 2.74461, "loss_lovasz": 0.93606, "d0.loss_v_depth": 1.08605, "d0.loss_v_cls": 1.30486, "d1.loss_v_depth": 1.08839, "d1.loss_v_cls": 1.35728, "loss": 11.77192, "grad_norm": 9.8794, "time": 0.50391}
{"mode": "train", "epoch": 1, "iter": 24, "lr": 1e-05, "memory": 12316, "data_time": 0.0065, "loss_prob": 3.24505, "loss_cls": 2.74221, "loss_lovasz": 0.93545, "d0.loss_v_depth": 1.08475, "d0.loss_v_cls": 1.29402, "d1.loss_v_depth": 1.08938, "d1.loss_v_cls": 1.33752, "loss": 11.72838, "grad_norm": 9.89642, "time": 0.50362}
{"mode": "train", "epoch": 1, "iter": 25, "lr": 1e-05, "memory": 12316, "data_time": 0.00611, "loss_prob": 3.23839, "loss_cls": 2.75308, "loss_lovasz": 0.93615, "d0.loss_v_depth": 1.09462, "d0.loss_v_cls": 1.27999, "d1.loss_v_depth": 1.09768, "d1.loss_v_cls": 1.32921, "loss": 11.72913, "grad_norm": 7.24917, "time": 0.50987}
{"mode": "train", "epoch": 1, "iter": 26, "lr": 1e-05, "memory": 12316, "data_time": 0.00641, "loss_prob": 3.22901, "loss_cls": 2.74595, "loss_lovasz": 0.93598, "d0.loss_v_depth": 1.09422, "d0.loss_v_cls": 1.2888, "d1.loss_v_depth": 1.09542, "d1.loss_v_cls": 1.32456, "loss": 11.71394, "grad_norm": 7.0613, "time": 0.50913}
{"mode": "train", "epoch": 1, "iter": 27, "lr": 1e-05, "memory": 12316, "data_time": 0.00629, "loss_prob": 3.22044, "loss_cls": 2.74324, "loss_lovasz": 0.93563, "d0.loss_v_depth": 1.08586, "d0.loss_v_cls": 1.28187, "d1.loss_v_depth": 1.08729, "d1.loss_v_cls": 1.33088, "loss": 11.68522, "grad_norm": 7.4947, "time": 0.50943}
{"mode": "train", "epoch": 1, "iter": 28, "lr": 1e-05, "memory": 12316, "data_time": 0.00638, "loss_prob": 3.21199, "loss_cls": 2.73891, "loss_lovasz": 0.93554, "d0.loss_v_depth": 1.08466, "d0.loss_v_cls": 1.28494, "d1.loss_v_depth": 1.08401, "d1.loss_v_cls": 1.33617, "loss": 11.67621, "grad_norm": 6.16648, "time": 0.5085}
{"mode": "train", "epoch": 1, "iter": 29, "lr": 1e-05, "memory": 12316, "data_time": 0.00694, "loss_prob": 3.19872, "loss_cls": 2.73246, "loss_lovasz": 0.9357, "d0.loss_v_depth": 1.08157, "d0.loss_v_cls": 1.28167, "d1.loss_v_depth": 1.07842, "d1.loss_v_cls": 1.33474, "loss": 11.64328, "grad_norm": 7.97841, "time": 0.50762}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 1e-05, "memory": 12316, "data_time": 0.00635, "loss_prob": 3.17925, "loss_cls": 2.7308, "loss_lovasz": 0.93535, "d0.loss_v_depth": 1.09255, "d0.loss_v_cls": 1.25792, "d1.loss_v_depth": 1.09049, "d1.loss_v_cls": 1.29294, "loss": 11.57931, "grad_norm": 6.19022, "time": 0.49685}
{"mode": "train", "epoch": 1, "iter": 31, "lr": 1e-05, "memory": 12316, "data_time": 0.0096, "loss_prob": 3.15722, "loss_cls": 2.72249, "loss_lovasz": 0.93484, "d0.loss_v_depth": 1.08454, "d0.loss_v_cls": 1.23184, "d1.loss_v_depth": 1.08644, "d1.loss_v_cls": 1.2796, "loss": 11.49697, "grad_norm": 7.07795, "time": 0.5163}
{"mode": "train", "epoch": 1, "iter": 32, "lr": 1e-05, "memory": 12316, "data_time": 0.00679, "loss_prob": 3.135, "loss_cls": 2.71057, "loss_lovasz": 0.93469, "d0.loss_v_depth": 1.08154, "d0.loss_v_cls": 1.20853, "d1.loss_v_depth": 1.08124, "d1.loss_v_cls": 1.25485, "loss": 11.40642, "grad_norm": 6.30205, "time": 0.5043}
{"mode": "train", "epoch": 1, "iter": 33, "lr": 1e-05, "memory": 12316, "data_time": 0.00699, "loss_prob": 3.11993, "loss_cls": 2.70029, "loss_lovasz": 0.93397, "d0.loss_v_depth": 1.07841, "d0.loss_v_cls": 1.20549, "d1.loss_v_depth": 1.07667, "d1.loss_v_cls": 1.23704, "loss": 11.3518, "grad_norm": 6.5297, "time": 0.50053}
{"mode": "train", "epoch": 1, "iter": 34, "lr": 1e-05, "memory": 12316, "data_time": 0.00643, "loss_prob": 3.11418, "loss_cls": 2.69156, "loss_lovasz": 0.93357, "d0.loss_v_depth": 1.07267, "d0.loss_v_cls": 1.18299, "d1.loss_v_depth": 1.07125, "d1.loss_v_cls": 1.22623, "loss": 11.29245, "grad_norm": 7.42422, "time": 0.50918}
{"mode": "train", "epoch": 1, "iter": 35, "lr": 1e-05, "memory": 12316, "data_time": 0.00652, "loss_prob": 3.1178, "loss_cls": 2.69175, "loss_lovasz": 0.93378, "d0.loss_v_depth": 1.09164, "d0.loss_v_cls": 1.18719, "d1.loss_v_depth": 1.08629, "d1.loss_v_cls": 1.21649, "loss": 11.32494, "grad_norm": 5.57489, "time": 0.50242}
{"mode": "train", "epoch": 1, "iter": 36, "lr": 1e-05, "memory": 12316, "data_time": 0.00661, "loss_prob": 3.13458, "loss_cls": 2.68591, "loss_lovasz": 0.93415, "d0.loss_v_depth": 1.08127, "d0.loss_v_cls": 1.18291, "d1.loss_v_depth": 1.07958, "d1.loss_v_cls": 1.21746, "loss": 11.31586, "grad_norm": 5.35102, "time": 0.50463}
{"mode": "train", "epoch": 1, "iter": 37, "lr": 1e-05, "memory": 12316, "data_time": 0.00685, "loss_prob": 3.14587, "loss_cls": 2.6776, "loss_lovasz": 0.9334, "d0.loss_v_depth": 1.08433, "d0.loss_v_cls": 1.17488, "d1.loss_v_depth": 1.07889, "d1.loss_v_cls": 1.20837, "loss": 11.30333, "grad_norm": 5.45909, "time": 0.50593}
{"mode": "train", "epoch": 1, "iter": 38, "lr": 1e-05, "memory": 12316, "data_time": 0.0069, "loss_prob": 3.13976, "loss_cls": 2.66971, "loss_lovasz": 0.93309, "d0.loss_v_depth": 1.07429, "d0.loss_v_cls": 1.18631, "d1.loss_v_depth": 1.07084, "d1.loss_v_cls": 1.20236, "loss": 11.27636, "grad_norm": 5.20207, "time": 0.5055}
{"mode": "train", "epoch": 1, "iter": 39, "lr": 1e-05, "memory": 12316, "data_time": 0.00693, "loss_prob": 3.12901, "loss_cls": 2.66403, "loss_lovasz": 0.93289, "d0.loss_v_depth": 1.07722, "d0.loss_v_cls": 1.17973, "d1.loss_v_depth": 1.07204, "d1.loss_v_cls": 1.20759, "loss": 11.26251, "grad_norm": 5.72848, "time": 0.50499}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 1e-05, "memory": 12316, "data_time": 0.00631, "loss_prob": 3.12196, "loss_cls": 2.65604, "loss_lovasz": 0.93288, "d0.loss_v_depth": 1.07169, "d0.loss_v_cls": 1.17658, "d1.loss_v_depth": 1.06916, "d1.loss_v_cls": 1.19598, "loss": 11.22431, "grad_norm": 7.58837, "time": 0.50116}
{"mode": "train", "epoch": 1, "iter": 41, "lr": 1e-05, "memory": 12316, "data_time": 0.00649, "loss_prob": 3.0558, "loss_cls": 2.60368, "loss_lovasz": 0.93593, "d0.loss_v_depth": 1.06909, "d0.loss_v_cls": 1.23288, "d1.loss_v_depth": 1.06227, "d1.loss_v_cls": 1.24539, "loss": 11.20505, "grad_norm": 7.17158, "time": 0.50188}
{"mode": "train", "epoch": 1, "iter": 42, "lr": 1e-05, "memory": 12316, "data_time": 0.00643, "loss_prob": 3.06017, "loss_cls": 2.59951, "loss_lovasz": 0.93606, "d0.loss_v_depth": 1.07246, "d0.loss_v_cls": 1.2131, "d1.loss_v_depth": 1.0652, "d1.loss_v_cls": 1.21826, "loss": 11.16477, "grad_norm": 6.95945, "time": 0.51452}
{"mode": "train", "epoch": 1, "iter": 43, "lr": 1e-05, "memory": 12316, "data_time": 0.00607, "loss_prob": 3.04668, "loss_cls": 2.59452, "loss_lovasz": 0.93669, "d0.loss_v_depth": 1.06612, "d0.loss_v_cls": 1.19588, "d1.loss_v_depth": 1.05819, "d1.loss_v_cls": 1.20132, "loss": 11.0994, "grad_norm": 6.63082, "time": 0.50653}
{"mode": "train", "epoch": 1, "iter": 44, "lr": 1e-05, "memory": 12316, "data_time": 0.00632, "loss_prob": 3.03695, "loss_cls": 2.58404, "loss_lovasz": 0.9367, "d0.loss_v_depth": 1.05883, "d0.loss_v_cls": 1.21411, "d1.loss_v_depth": 1.0508, "d1.loss_v_cls": 1.21057, "loss": 11.092, "grad_norm": 6.58587, "time": 0.50307}
{"mode": "train", "epoch": 1, "iter": 45, "lr": 1e-05, "memory": 12316, "data_time": 0.00655, "loss_prob": 3.04517, "loss_cls": 2.56367, "loss_lovasz": 0.93542, "d0.loss_v_depth": 1.04927, "d0.loss_v_cls": 1.19983, "d1.loss_v_depth": 1.04268, "d1.loss_v_cls": 1.20593, "loss": 11.04197, "grad_norm": 7.772, "time": 0.50421}
{"mode": "train", "epoch": 1, "iter": 46, "lr": 1e-05, "memory": 12316, "data_time": 0.00647, "loss_prob": 3.03995, "loss_cls": 2.55981, "loss_lovasz": 0.93579, "d0.loss_v_depth": 1.04972, "d0.loss_v_cls": 1.20271, "d1.loss_v_depth": 1.04493, "d1.loss_v_cls": 1.20572, "loss": 11.03863, "grad_norm": 6.44586, "time": 0.50216}
{"mode": "train", "epoch": 1, "iter": 47, "lr": 1e-05, "memory": 12316, "data_time": 0.00642, "loss_prob": 3.03387, "loss_cls": 2.55471, "loss_lovasz": 0.93615, "d0.loss_v_depth": 1.05407, "d0.loss_v_cls": 1.17856, "d1.loss_v_depth": 1.04638, "d1.loss_v_cls": 1.16926, "loss": 10.97299, "grad_norm": 5.71993, "time": 0.50897}
{"mode": "train", "epoch": 1, "iter": 48, "lr": 1e-05, "memory": 12316, "data_time": 0.00645, "loss_prob": 3.01549, "loss_cls": 2.54258, "loss_lovasz": 0.93573, "d0.loss_v_depth": 1.05404, "d0.loss_v_cls": 1.17993, "d1.loss_v_depth": 1.04722, "d1.loss_v_cls": 1.17767, "loss": 10.95265, "grad_norm": 6.01867, "time": 0.51025}
