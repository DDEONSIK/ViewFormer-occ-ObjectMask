{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.10.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.28.2\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+f38b575\nspconv2.0: False", "config": "point_cloud_range = [-40, -40, -1.0, 40, 40, 5.4]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuSceneOcc'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(\n        type='LoadOccGTFromFile',\n        data_root='data/nuscenes/',\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        with_attr_label=False),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='CustomResizeCropFlipImage',\n        data_aug_conf=dict(\n            resize_lim=(0.386, 0.55),\n            final_dim=(256, 704),\n            bot_pct_lim=(0.0, 0.0),\n            rot_lim=(0.0, 0.0),\n            H=900,\n            W=1600,\n            rand_flip=True),\n        training=True),\n    dict(\n        type='CustomGlobalRotScaleTransImage',\n        flip_hv_ratio=[0.5, 0.5],\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='Collect3D',\n        keys=[\n            'img', 'voxel_semantics', 'mask_lidar', 'mask_camera',\n            'prev_exists'\n        ],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                   'depth2img', 'cam2img', 'pad_shape', 'scale_factor', 'flip',\n                   'pcd_horizontal_flip', 'pcd_vertical_flip', 'box_mode_3d',\n                   'box_type_3d', 'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                   'pcd_scale_factor', 'pcd_rotation', 'pts_filename',\n                   'transformation_3d_flow', 'scene_token', 'can_bus',\n                   'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                   'timestamp', 'img_trans_dict', 'ego_trans_dict',\n                   'cam_intrinsic', 'cam2ego', 'pixel_wise_label'))\n]\ntest_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n    dict(\n        type='CustomResizeCropFlipImage',\n        data_aug_conf=dict(\n            resize_lim=(0.386, 0.55),\n            final_dim=(256, 704),\n            bot_pct_lim=(0.0, 0.0),\n            rot_lim=(0.0, 0.0),\n            H=900,\n            W=1600,\n            rand_flip=True),\n        training=False),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['img'],\n                meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                           'depth2img', 'cam2img', 'pad_shape', 'scale_factor',\n                           'flip', 'pcd_horizontal_flip', 'pcd_vertical_flip',\n                           'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                           'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                           'pcd_rotation', 'pts_filename',\n                           'transformation_3d_flow', 'scene_token', 'can_bus',\n                           'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                           'timestamp', 'img_trans_dict', 'ego_trans_dict'))\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_train.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadOccGTFromFile',\n                data_root='data/nuscenes/',\n                pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=False),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=True),\n            dict(\n                type='CustomGlobalRotScaleTransImage',\n                flip_hv_ratio=[0.5, 0.5],\n                pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=[\n                    'img', 'voxel_semantics', 'mask_lidar', 'mask_camera',\n                    'prev_exists'\n                ],\n                meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                           'depth2img', 'cam2img', 'pad_shape', 'scale_factor',\n                           'flip', 'pcd_horizontal_flip', 'pcd_vertical_flip',\n                           'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                           'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                           'pcd_rotation', 'pts_filename',\n                           'transformation_3d_flow', 'scene_token', 'can_bus',\n                           'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                           'timestamp', 'img_trans_dict', 'ego_trans_dict',\n                           'cam_intrinsic', 'cam2ego', 'pixel_wise_label'))\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True,\n        queue_length=0,\n        num_frame_losses=1,\n        seq_split_num=2,\n        seq_mode=True),\n    val=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=False),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'lidar2img', 'depth2img', 'cam2img',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'pcd_horizontal_flip', 'pcd_vertical_flip',\n                                   'box_mode_3d', 'box_type_3d',\n                                   'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                                   'pcd_scale_factor', 'pcd_rotation',\n                                   'pts_filename', 'transformation_3d_flow',\n                                   'scene_token', 'can_bus', 'ego2lidar',\n                                   'prev_idx', 'next_idx', 'ego2global',\n                                   'timestamp', 'img_trans_dict',\n                                   'ego_trans_dict'))\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        queue_length=0,\n        video_test_mode=True),\n    test=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=False),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'lidar2img', 'depth2img', 'cam2img',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'pcd_horizontal_flip', 'pcd_vertical_flip',\n                                   'box_mode_3d', 'box_type_3d',\n                                   'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                                   'pcd_scale_factor', 'pcd_rotation',\n                                   'pts_filename', 'transformation_3d_flow',\n                                   'scene_token', 'can_bus', 'ego2lidar',\n                                   'prev_idx', 'next_idx', 'ego2global',\n                                   'timestamp', 'img_trans_dict',\n                                   'ego_trans_dict'))\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        queue_length=0,\n        video_test_mode=True),\n    shuffler_sampler=dict(type='InfiniteGroupEachSampleInBatchSampler'),\n    nonshuffler_sampler=dict(type='DistributedSampler'))\nevaluation = dict(\n    interval=1265850,\n    pipeline=[\n        dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n        dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n        dict(\n            type='CustomResizeCropFlipImage',\n            data_aug_conf=dict(\n                resize_lim=(0.386, 0.55),\n                final_dim=(256, 704),\n                bot_pct_lim=(0.0, 0.0),\n                rot_lim=(0.0, 0.0),\n                H=900,\n                W=1600,\n                rand_flip=True),\n            training=False),\n        dict(\n            type='NormalizeMultiviewImage',\n            mean=[123.675, 116.28, 103.53],\n            std=[58.395, 57.12, 57.375],\n            to_rgb=True),\n        dict(type='PadMultiViewImage', size_divisor=32),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1333, 800),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='Collect3D',\n                    keys=['img'],\n                    meta_keys=('filename', 'ori_shape', 'img_shape',\n                               'lidar2img', 'depth2img', 'cam2img',\n                               'pad_shape', 'scale_factor', 'flip',\n                               'pcd_horizontal_flip', 'pcd_vertical_flip',\n                               'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                               'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                               'pcd_rotation', 'pts_filename',\n                               'transformation_3d_flow', 'scene_token',\n                               'can_bus', 'ego2lidar', 'prev_idx', 'next_idx',\n                               'ego2global', 'timestamp', 'img_trans_dict',\n                               'ego_trans_dict'))\n            ])\n    ])\ncheckpoint_config = dict(interval=14065, max_keep_ckpts=1)\nlog_config = dict(\n    interval=1,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/ori_multi_train_4090_Vis'\nload_from = 'ckpts/r50_256x705_depth_pretrain.pth'\nresume_from = '/home/hyun/local_storage/code/vieeew/ViewFormer-Occ/work_dirs/Visualization/ORI-10%/iter_70325.pth'\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nplugin = True\nplugin_dir = 'projects/mmdet3d_plugin/'\nrelative_relo_range = [-18.84, -18.84, -1.05, 18.84, 18.84, 1.05]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\npoint_class_names = [\n    'ignore', 'barrier', 'bicycle', 'bus', 'car', 'construction_vehicle',\n    'motorcycle', 'pedestrian', 'traffic_cone', 'trailer', 'truck',\n    'driveable_surface', 'other_flat', 'sidewalk', 'terrain', 'manmade',\n    'vegetation'\n]\nnum_gpus = 2\nbatch_size = 1\nnum_iters_per_epoch = 14065\nnum_epochs = 90\nbev_h_ = 100\nbev_w_ = 100\nnum_points_in_pillar = 8\nspace_in_shape = [8, 100, 100]\nspace_out_shape = [16, 200, 200]\nnum_cams = 6\nnum_levels = 3\nfinal_dim = (256, 704)\nembed_dims = 72\nnum_heads = 9\nnum_frame_losses = 1\nuse_temporal = True\nqueue_length = 0\nvideo_test_mode = True\nnum_memory = 4\nvoxel2bev = True\nbev_dim = 126\ntime_range = [-2.3, 0.0]\nmodel = dict(\n    type='ViewFormer',\n    use_grid_mask=True,\n    video_test_mode=True,\n    use_temporal=True,\n    num_frame_backbone_grads=1,\n    num_frame_head_grads=1,\n    num_frame_losses=1,\n    depth_supvise=True,\n    img_backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(1, 2, 3),\n        frozen_stages=-1,\n        norm_cfg=dict(type='BN2d', requires_grad=False),\n        norm_eval=True,\n        with_cp=True,\n        style='pytorch'),\n    img_neck=dict(\n        type='FPN',\n        in_channels=[512, 1024, 2048],\n        out_channels=256,\n        num_outs=3,\n        add_extra_convs='on_output',\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='ViewFormerHead',\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n        num_levels=3,\n        final_dim=(256, 704),\n        in_channels=256,\n        bev_h=100,\n        bev_w=100,\n        num_points_in_pillar=8,\n        time_range=[-2.3, 0.0],\n        use_mask_lidar=False,\n        use_mask_camera=True,\n        use_temporal=True,\n        num_memory=4,\n        bev_dim=126,\n        relative_relo_range=[-18.84, -18.84, -1.05, 18.84, 18.84, 1.05],\n        out_space3D_feat=False,\n        space3D_net_cfg=dict(\n            in_channels=72,\n            bev_dim=126,\n            feat_channels=32,\n            in_shape=[8, 100, 100],\n            out_shape=[16, 200, 200],\n            num_classes=18),\n        transformer=dict(\n            type='ViewFormerTransformer',\n            decoder=dict(\n                type='ViewFormerTransformerDecoder',\n                num_layers=4,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='ViewFormerTransformerLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='StreamTemporalAttn',\n                            pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n                            num_levels=4,\n                            embed_dims=126,\n                            num_heads=9,\n                            data_from_dict=True,\n                            voxel2bev=True,\n                            voxel_dim=72,\n                            num_points=4),\n                        dict(\n                            type='ViewAttn',\n                            pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n                            with_ffn=True,\n                            num_levels=3,\n                            embed_dims=72,\n                            num_heads=9,\n                            num_points=1)\n                    ],\n                    operation_order=('cross_attn', 'cross_attn')))),\n        loss_prob=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=3.0),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        loss_lovasz=dict(type='LovaszLoss', loss_weight=1.0)))\nida_aug_conf = dict(\n    resize_lim=(0.386, 0.55),\n    final_dim=(256, 704),\n    bot_pct_lim=(0.0, 0.0),\n    rot_lim=(0.0, 0.0),\n    H=900,\n    W=1600,\n    rand_flip=True)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.25))),\n    weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.1,\n    min_lr_ratio=0.001)\nrunner = dict(type='IterBasedRunner', max_iters=1265850)\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "viewformer_r50_704x256_seq_90e.py"}
{"mode": "train", "epoch": 1, "iter": 70325, "lr": 5e-05, "memory": 11631, "data_time": 0.70669, "loss_prob": 0.25622, "loss_cls": 0.54601, "loss_lovasz": 0.51622, "d0.loss_v_depth": 0.45337, "d0.loss_v_cls": 0.27632, "d1.loss_v_depth": 0.45344, "d1.loss_v_cls": 0.26164, "loss": 2.76323, "grad_norm": 5.92149, "time": 4.1581}
{"mode": "train", "epoch": 1, "iter": 70326, "lr": 5e-05, "memory": 12146, "data_time": 0.00574, "loss_prob": 0.21397, "loss_cls": 0.4415, "loss_lovasz": 0.48935, "d0.loss_v_depth": 0.49496, "d0.loss_v_cls": 0.29599, "d1.loss_v_depth": 0.49138, "d1.loss_v_cls": 0.27266, "loss": 2.69981, "grad_norm": 6.93631, "time": 1.09572}
{"mode": "train", "epoch": 1, "iter": 70327, "lr": 5e-05, "memory": 12215, "data_time": 0.00649, "loss_prob": 0.21856, "loss_cls": 0.41974, "loss_lovasz": 0.46158, "d0.loss_v_depth": 0.46198, "d0.loss_v_cls": 0.28122, "d1.loss_v_depth": 0.46492, "d1.loss_v_cls": 0.26354, "loss": 2.57154, "grad_norm": 5.65108, "time": 1.12406}
{"mode": "train", "epoch": 1, "iter": 70328, "lr": 5e-05, "memory": 12350, "data_time": 0.00648, "loss_prob": 0.19836, "loss_cls": 0.41778, "loss_lovasz": 0.47555, "d0.loss_v_depth": 0.54764, "d0.loss_v_cls": 0.32646, "d1.loss_v_depth": 0.56062, "d1.loss_v_cls": 0.31298, "loss": 2.83938, "grad_norm": 9.8055, "time": 1.12555}
{"mode": "train", "epoch": 1, "iter": 70329, "lr": 5e-05, "memory": 12350, "data_time": 0.00926, "loss_prob": 0.19716, "loss_cls": 0.39065, "loss_lovasz": 0.41499, "d0.loss_v_depth": 0.50807, "d0.loss_v_cls": 0.28944, "d1.loss_v_depth": 0.52022, "d1.loss_v_cls": 0.27001, "loss": 2.59056, "grad_norm": 6.85377, "time": 1.11321}
{"mode": "train", "epoch": 1, "iter": 70330, "lr": 5e-05, "memory": 12350, "data_time": 0.00463, "loss_prob": 0.1994, "loss_cls": 0.35039, "loss_lovasz": 0.43343, "d0.loss_v_depth": 0.51771, "d0.loss_v_cls": 0.26362, "d1.loss_v_depth": 0.52592, "d1.loss_v_cls": 0.23929, "loss": 2.52977, "grad_norm": 4.17524, "time": 1.10879}
{"mode": "train", "epoch": 1, "iter": 70331, "lr": 5e-05, "memory": 12350, "data_time": 0.00483, "loss_prob": 0.21167, "loss_cls": 0.37162, "loss_lovasz": 0.45973, "d0.loss_v_depth": 0.53103, "d0.loss_v_cls": 0.33319, "d1.loss_v_depth": 0.53884, "d1.loss_v_cls": 0.32483, "loss": 2.77091, "grad_norm": 4.51634, "time": 1.12355}
{"mode": "train", "epoch": 1, "iter": 70332, "lr": 5e-05, "memory": 12350, "data_time": 0.00647, "loss_prob": 0.2028, "loss_cls": 0.32395, "loss_lovasz": 0.41177, "d0.loss_v_depth": 0.49288, "d0.loss_v_cls": 0.3024, "d1.loss_v_depth": 0.51032, "d1.loss_v_cls": 0.28505, "loss": 2.52917, "grad_norm": 5.38006, "time": 1.12626}
{"mode": "train", "epoch": 1, "iter": 70333, "lr": 5e-05, "memory": 12350, "data_time": 0.00612, "loss_prob": 0.21677, "loss_cls": 0.35545, "loss_lovasz": 0.46913, "d0.loss_v_depth": 0.52099, "d0.loss_v_cls": 0.41824, "d1.loss_v_depth": 0.53021, "d1.loss_v_cls": 0.41707, "loss": 2.92785, "grad_norm": 6.74701, "time": 1.11292}
{"mode": "train", "epoch": 1, "iter": 70334, "lr": 5e-05, "memory": 12350, "data_time": 0.00637, "loss_prob": 0.22064, "loss_cls": 0.32479, "loss_lovasz": 0.4424, "d0.loss_v_depth": 0.54325, "d0.loss_v_cls": 0.3425, "d1.loss_v_depth": 0.54896, "d1.loss_v_cls": 0.33775, "loss": 2.76029, "grad_norm": 7.39409, "time": 2.59738}
{"mode": "train", "epoch": 1, "iter": 70335, "lr": 5e-05, "memory": 12350, "data_time": 0.00649, "loss_prob": 0.21876, "loss_cls": 0.2889, "loss_lovasz": 0.36752, "d0.loss_v_depth": 0.49284, "d0.loss_v_cls": 0.34519, "d1.loss_v_depth": 0.50286, "d1.loss_v_cls": 0.33795, "loss": 2.55402, "grad_norm": 5.5103, "time": 1.13391}
{"mode": "train", "epoch": 1, "iter": 70336, "lr": 5e-05, "memory": 12350, "data_time": 0.00612, "loss_prob": 0.21779, "loss_cls": 0.2935, "loss_lovasz": 0.37995, "d0.loss_v_depth": 0.48074, "d0.loss_v_cls": 0.36609, "d1.loss_v_depth": 0.50089, "d1.loss_v_cls": 0.36327, "loss": 2.60222, "grad_norm": 4.16868, "time": 1.10622}
{"mode": "train", "epoch": 1, "iter": 70337, "lr": 5e-05, "memory": 12350, "data_time": 0.00624, "loss_prob": 0.21218, "loss_cls": 0.2617, "loss_lovasz": 0.41619, "d0.loss_v_depth": 0.50231, "d0.loss_v_cls": 0.39274, "d1.loss_v_depth": 0.51954, "d1.loss_v_cls": 0.36902, "loss": 2.67369, "grad_norm": 5.444, "time": 1.10856}
{"mode": "train", "epoch": 1, "iter": 70338, "lr": 5e-05, "memory": 12350, "data_time": 0.00646, "loss_prob": 0.21235, "loss_cls": 0.25199, "loss_lovasz": 0.3996, "d0.loss_v_depth": 0.45782, "d0.loss_v_cls": 0.36422, "d1.loss_v_depth": 0.47316, "d1.loss_v_cls": 0.32359, "loss": 2.48273, "grad_norm": 6.70265, "time": 1.10339}
{"mode": "train", "epoch": 1, "iter": 70339, "lr": 5e-05, "memory": 12350, "data_time": 0.00632, "loss_prob": 0.21106, "loss_cls": 0.23803, "loss_lovasz": 0.35908, "d0.loss_v_depth": 0.44552, "d0.loss_v_cls": 0.3352, "d1.loss_v_depth": 0.46405, "d1.loss_v_cls": 0.32422, "loss": 2.37716, "grad_norm": 7.0907, "time": 1.10114}
{"mode": "train", "epoch": 1, "iter": 70340, "lr": 5e-05, "memory": 12350, "data_time": 0.00633, "loss_prob": 0.20528, "loss_cls": 0.23853, "loss_lovasz": 0.38244, "d0.loss_v_depth": 0.48165, "d0.loss_v_cls": 0.31428, "d1.loss_v_depth": 0.50276, "d1.loss_v_cls": 0.30208, "loss": 2.427, "grad_norm": 4.03681, "time": 1.11214}
{"mode": "train", "epoch": 1, "iter": 70341, "lr": 5e-05, "memory": 12350, "data_time": 0.00626, "loss_prob": 0.21282, "loss_cls": 0.24325, "loss_lovasz": 0.32024, "d0.loss_v_depth": 0.47374, "d0.loss_v_cls": 0.32049, "d1.loss_v_depth": 0.48075, "d1.loss_v_cls": 0.30468, "loss": 2.35597, "grad_norm": 5.05168, "time": 1.10238}
{"mode": "train", "epoch": 1, "iter": 70342, "lr": 5e-05, "memory": 12350, "data_time": 0.00621, "loss_prob": 0.21797, "loss_cls": 0.26066, "loss_lovasz": 0.35895, "d0.loss_v_depth": 0.46966, "d0.loss_v_cls": 0.32388, "d1.loss_v_depth": 0.48406, "d1.loss_v_cls": 0.29972, "loss": 2.4149, "grad_norm": 4.93543, "time": 1.1133}
{"mode": "train", "epoch": 1, "iter": 70343, "lr": 5e-05, "memory": 12350, "data_time": 0.00638, "loss_prob": 0.20933, "loss_cls": 0.23337, "loss_lovasz": 0.35682, "d0.loss_v_depth": 0.46635, "d0.loss_v_cls": 0.27407, "d1.loss_v_depth": 0.48717, "d1.loss_v_cls": 0.27783, "loss": 2.30493, "grad_norm": 4.53436, "time": 1.10388}
{"mode": "train", "epoch": 1, "iter": 70344, "lr": 5e-05, "memory": 12350, "data_time": 0.00639, "loss_prob": 0.21317, "loss_cls": 0.2391, "loss_lovasz": 0.35394, "d0.loss_v_depth": 0.48062, "d0.loss_v_cls": 0.28598, "d1.loss_v_depth": 0.49487, "d1.loss_v_cls": 0.27637, "loss": 2.34406, "grad_norm": 3.42655, "time": 1.11817}
{"mode": "train", "epoch": 1, "iter": 70345, "lr": 5e-05, "memory": 12350, "data_time": 0.00634, "loss_prob": 0.33652, "loss_cls": 0.62161, "loss_lovasz": 0.47155, "d0.loss_v_depth": 0.55795, "d0.loss_v_cls": 0.4207, "d1.loss_v_depth": 0.54154, "d1.loss_v_cls": 0.403, "loss": 3.35286, "grad_norm": 6.24417, "time": 1.10467}
{"mode": "train", "epoch": 1, "iter": 70346, "lr": 5e-05, "memory": 12350, "data_time": 0.00632, "loss_prob": 0.34434, "loss_cls": 0.61374, "loss_lovasz": 0.46364, "d0.loss_v_depth": 0.54183, "d0.loss_v_cls": 0.38395, "d1.loss_v_depth": 0.52838, "d1.loss_v_cls": 0.37937, "loss": 3.25523, "grad_norm": 6.00076, "time": 1.10888}
{"mode": "train", "epoch": 1, "iter": 70347, "lr": 5e-05, "memory": 12350, "data_time": 0.00665, "loss_prob": 0.34426, "loss_cls": 0.61775, "loss_lovasz": 0.47618, "d0.loss_v_depth": 0.5069, "d0.loss_v_cls": 0.41564, "d1.loss_v_depth": 0.50784, "d1.loss_v_cls": 0.39763, "loss": 3.26621, "grad_norm": 5.23419, "time": 2.60695}
{"mode": "train", "epoch": 1, "iter": 70348, "lr": 5e-05, "memory": 12350, "data_time": 1.48504, "loss_prob": 0.34892, "loss_cls": 0.67214, "loss_lovasz": 0.48094, "d0.loss_v_depth": 0.56961, "d0.loss_v_cls": 0.42926, "d1.loss_v_depth": 0.56958, "d1.loss_v_cls": 0.42948, "loss": 3.49992, "grad_norm": 7.14362, "time": 2.59681}
{"mode": "train", "epoch": 1, "iter": 70349, "lr": 5e-05, "memory": 12350, "data_time": 0.0065, "loss_prob": 0.34783, "loss_cls": 0.63439, "loss_lovasz": 0.44396, "d0.loss_v_depth": 0.58058, "d0.loss_v_cls": 0.38517, "d1.loss_v_depth": 0.56875, "d1.loss_v_cls": 0.37153, "loss": 3.33221, "grad_norm": 5.12033, "time": 1.14973}
{"mode": "train", "epoch": 1, "iter": 70350, "lr": 5e-05, "memory": 12350, "data_time": 0.0065, "loss_prob": 0.38668, "loss_cls": 0.64923, "loss_lovasz": 0.46, "d0.loss_v_depth": 0.56273, "d0.loss_v_cls": 0.42518, "d1.loss_v_depth": 0.56419, "d1.loss_v_cls": 0.40925, "loss": 3.45725, "grad_norm": 5.62155, "time": 1.51737}
{"mode": "train", "epoch": 1, "iter": 70351, "lr": 5e-05, "memory": 12350, "data_time": 0.00645, "loss_prob": 0.32324, "loss_cls": 0.59042, "loss_lovasz": 0.42572, "d0.loss_v_depth": 0.55634, "d0.loss_v_cls": 0.41102, "d1.loss_v_depth": 0.55084, "d1.loss_v_cls": 0.40942, "loss": 3.26701, "grad_norm": 4.33171, "time": 1.28068}
{"mode": "train", "epoch": 1, "iter": 70352, "lr": 5e-05, "memory": 12350, "data_time": 0.03217, "loss_prob": 0.31689, "loss_cls": 0.59335, "loss_lovasz": 0.42796, "d0.loss_v_depth": 0.56318, "d0.loss_v_cls": 0.39731, "d1.loss_v_depth": 0.55569, "d1.loss_v_cls": 0.37536, "loss": 3.22974, "grad_norm": 4.65758, "time": 1.68797}
{"mode": "train", "epoch": 1, "iter": 70353, "lr": 5e-05, "memory": 12350, "data_time": 0.00692, "loss_prob": 0.29268, "loss_cls": 0.5649, "loss_lovasz": 0.4221, "d0.loss_v_depth": 0.52807, "d0.loss_v_cls": 0.34613, "d1.loss_v_depth": 0.50935, "d1.loss_v_cls": 0.33049, "loss": 2.99372, "grad_norm": 3.51555, "time": 1.45476}
