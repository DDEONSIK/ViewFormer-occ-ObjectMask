{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 2.0.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.2\nOpenCV: 4.10.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.28.2\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+f38b575\nspconv2.0: False", "config": "point_cloud_range = [-40, -40, -1.0, 40, 40, 5.4]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuSceneOcc'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(\n        type='LoadOccGTFromFile',\n        data_root='data/nuscenes/',\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        with_attr_label=False),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='CustomResizeCropFlipImage',\n        data_aug_conf=dict(\n            resize_lim=(0.386, 0.55),\n            final_dim=(256, 704),\n            bot_pct_lim=(0.0, 0.0),\n            rot_lim=(0.0, 0.0),\n            H=900,\n            W=1600,\n            rand_flip=True),\n        training=True),\n    dict(\n        type='CustomGlobalRotScaleTransImage',\n        flip_hv_ratio=[0.5, 0.5],\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='Collect3D',\n        keys=[\n            'img', 'voxel_semantics', 'mask_lidar', 'mask_camera',\n            'prev_exists'\n        ],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                   'depth2img', 'cam2img', 'pad_shape', 'scale_factor', 'flip',\n                   'pcd_horizontal_flip', 'pcd_vertical_flip', 'box_mode_3d',\n                   'box_type_3d', 'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                   'pcd_scale_factor', 'pcd_rotation', 'pts_filename',\n                   'transformation_3d_flow', 'scene_token', 'can_bus',\n                   'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                   'timestamp', 'img_trans_dict', 'ego_trans_dict',\n                   'cam_intrinsic', 'cam2ego', 'pixel_wise_label'))\n]\ntest_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n    dict(\n        type='CustomResizeCropFlipImage',\n        data_aug_conf=dict(\n            resize_lim=(0.386, 0.55),\n            final_dim=(256, 704),\n            bot_pct_lim=(0.0, 0.0),\n            rot_lim=(0.0, 0.0),\n            H=900,\n            W=1600,\n            rand_flip=True),\n        training=False),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['img'],\n                meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                           'depth2img', 'cam2img', 'pad_shape', 'scale_factor',\n                           'flip', 'pcd_horizontal_flip', 'pcd_vertical_flip',\n                           'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                           'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                           'pcd_rotation', 'pts_filename',\n                           'transformation_3d_flow', 'scene_token', 'can_bus',\n                           'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                           'timestamp', 'img_trans_dict', 'ego_trans_dict'))\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_train.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadOccGTFromFile',\n                data_root='data/nuscenes/',\n                pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=False),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=True),\n            dict(\n                type='CustomGlobalRotScaleTransImage',\n                flip_hv_ratio=[0.5, 0.5],\n                pc_range=[-40, -40, -1.0, 40, 40, 5.4]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=[\n                    'img', 'voxel_semantics', 'mask_lidar', 'mask_camera',\n                    'prev_exists'\n                ],\n                meta_keys=('filename', 'ori_shape', 'img_shape', 'lidar2img',\n                           'depth2img', 'cam2img', 'pad_shape', 'scale_factor',\n                           'flip', 'pcd_horizontal_flip', 'pcd_vertical_flip',\n                           'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                           'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                           'pcd_rotation', 'pts_filename',\n                           'transformation_3d_flow', 'scene_token', 'can_bus',\n                           'ego2lidar', 'prev_idx', 'next_idx', 'ego2global',\n                           'timestamp', 'img_trans_dict', 'ego_trans_dict',\n                           'cam_intrinsic', 'cam2ego', 'pixel_wise_label'))\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True,\n        queue_length=0,\n        num_frame_losses=1,\n        seq_split_num=2,\n        seq_mode=True),\n    val=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=False),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'lidar2img', 'depth2img', 'cam2img',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'pcd_horizontal_flip', 'pcd_vertical_flip',\n                                   'box_mode_3d', 'box_type_3d',\n                                   'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                                   'pcd_scale_factor', 'pcd_rotation',\n                                   'pts_filename', 'transformation_3d_flow',\n                                   'scene_token', 'can_bus', 'ego2lidar',\n                                   'prev_idx', 'next_idx', 'ego2global',\n                                   'timestamp', 'img_trans_dict',\n                                   'ego_trans_dict'))\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        queue_length=0,\n        video_test_mode=True),\n    test=dict(\n        type='NuSceneOcc',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/occ_infos_temporal_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n            dict(\n                type='CustomResizeCropFlipImage',\n                data_aug_conf=dict(\n                    resize_lim=(0.386, 0.55),\n                    final_dim=(256, 704),\n                    bot_pct_lim=(0.0, 0.0),\n                    rot_lim=(0.0, 0.0),\n                    H=900,\n                    W=1600,\n                    rand_flip=True),\n                training=False),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'lidar2img', 'depth2img', 'cam2img',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'pcd_horizontal_flip', 'pcd_vertical_flip',\n                                   'box_mode_3d', 'box_type_3d',\n                                   'img_norm_cfg', 'pcd_trans', 'sample_idx',\n                                   'pcd_scale_factor', 'pcd_rotation',\n                                   'pts_filename', 'transformation_3d_flow',\n                                   'scene_token', 'can_bus', 'ego2lidar',\n                                   'prev_idx', 'next_idx', 'ego2global',\n                                   'timestamp', 'img_trans_dict',\n                                   'ego_trans_dict'))\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        queue_length=0,\n        video_test_mode=True),\n    shuffler_sampler=dict(type='InfiniteGroupEachSampleInBatchSampler'),\n    nonshuffler_sampler=dict(type='DistributedSampler'))\nevaluation = dict(\n    interval=1265850,\n    pipeline=[\n        dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n        dict(type='LoadOccGTFromFile', data_root='data/nuscenes/'),\n        dict(\n            type='CustomResizeCropFlipImage',\n            data_aug_conf=dict(\n                resize_lim=(0.386, 0.55),\n                final_dim=(256, 704),\n                bot_pct_lim=(0.0, 0.0),\n                rot_lim=(0.0, 0.0),\n                H=900,\n                W=1600,\n                rand_flip=True),\n            training=False),\n        dict(\n            type='NormalizeMultiviewImage',\n            mean=[123.675, 116.28, 103.53],\n            std=[58.395, 57.12, 57.375],\n            to_rgb=True),\n        dict(type='PadMultiViewImage', size_divisor=32),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1333, 800),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='Collect3D',\n                    keys=['img'],\n                    meta_keys=('filename', 'ori_shape', 'img_shape',\n                               'lidar2img', 'depth2img', 'cam2img',\n                               'pad_shape', 'scale_factor', 'flip',\n                               'pcd_horizontal_flip', 'pcd_vertical_flip',\n                               'box_mode_3d', 'box_type_3d', 'img_norm_cfg',\n                               'pcd_trans', 'sample_idx', 'pcd_scale_factor',\n                               'pcd_rotation', 'pts_filename',\n                               'transformation_3d_flow', 'scene_token',\n                               'can_bus', 'ego2lidar', 'prev_idx', 'next_idx',\n                               'ego2global', 'timestamp', 'img_trans_dict',\n                               'ego_trans_dict'))\n            ])\n    ])\ncheckpoint_config = dict(interval=14065, max_keep_ckpts=1)\nlog_config = dict(\n    interval=1,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/ori_multi_train_4090_Vis'\nload_from = 'ckpts/r50_256x705_depth_pretrain.pth'\nresume_from = '/home/hyun/local_storage/code/vieeew/ViewFormer-Occ/work_dirs/Visualization/ORI-10%/iter_140650.pth'\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nplugin = True\nplugin_dir = 'projects/mmdet3d_plugin/'\nrelative_relo_range = [-18.84, -18.84, -1.05, 18.84, 18.84, 1.05]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\npoint_class_names = [\n    'ignore', 'barrier', 'bicycle', 'bus', 'car', 'construction_vehicle',\n    'motorcycle', 'pedestrian', 'traffic_cone', 'trailer', 'truck',\n    'driveable_surface', 'other_flat', 'sidewalk', 'terrain', 'manmade',\n    'vegetation'\n]\nnum_gpus = 2\nbatch_size = 1\nnum_iters_per_epoch = 14065\nnum_epochs = 90\nbev_h_ = 100\nbev_w_ = 100\nnum_points_in_pillar = 8\nspace_in_shape = [8, 100, 100]\nspace_out_shape = [16, 200, 200]\nnum_cams = 6\nnum_levels = 3\nfinal_dim = (256, 704)\nembed_dims = 72\nnum_heads = 9\nnum_frame_losses = 1\nuse_temporal = True\nqueue_length = 0\nvideo_test_mode = True\nnum_memory = 4\nvoxel2bev = True\nbev_dim = 126\ntime_range = [-2.3, 0.0]\nmodel = dict(\n    type='ViewFormer',\n    use_grid_mask=True,\n    video_test_mode=True,\n    use_temporal=True,\n    num_frame_backbone_grads=1,\n    num_frame_head_grads=1,\n    num_frame_losses=1,\n    depth_supvise=True,\n    img_backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(1, 2, 3),\n        frozen_stages=-1,\n        norm_cfg=dict(type='BN2d', requires_grad=False),\n        norm_eval=True,\n        with_cp=True,\n        style='pytorch'),\n    img_neck=dict(\n        type='FPN',\n        in_channels=[512, 1024, 2048],\n        out_channels=256,\n        num_outs=3,\n        add_extra_convs='on_output',\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='ViewFormerHead',\n        pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n        num_levels=3,\n        final_dim=(256, 704),\n        in_channels=256,\n        bev_h=100,\n        bev_w=100,\n        num_points_in_pillar=8,\n        time_range=[-2.3, 0.0],\n        use_mask_lidar=False,\n        use_mask_camera=True,\n        use_temporal=True,\n        num_memory=4,\n        bev_dim=126,\n        relative_relo_range=[-18.84, -18.84, -1.05, 18.84, 18.84, 1.05],\n        out_space3D_feat=False,\n        space3D_net_cfg=dict(\n            in_channels=72,\n            bev_dim=126,\n            feat_channels=32,\n            in_shape=[8, 100, 100],\n            out_shape=[16, 200, 200],\n            num_classes=18),\n        transformer=dict(\n            type='ViewFormerTransformer',\n            decoder=dict(\n                type='ViewFormerTransformerDecoder',\n                num_layers=4,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='ViewFormerTransformerLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='StreamTemporalAttn',\n                            pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n                            num_levels=4,\n                            embed_dims=126,\n                            num_heads=9,\n                            data_from_dict=True,\n                            voxel2bev=True,\n                            voxel_dim=72,\n                            num_points=4),\n                        dict(\n                            type='ViewAttn',\n                            pc_range=[-40, -40, -1.0, 40, 40, 5.4],\n                            with_ffn=True,\n                            num_levels=3,\n                            embed_dims=72,\n                            num_heads=9,\n                            num_points=1)\n                    ],\n                    operation_order=('cross_attn', 'cross_attn')))),\n        loss_prob=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=3.0),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        loss_lovasz=dict(type='LovaszLoss', loss_weight=1.0)))\nida_aug_conf = dict(\n    resize_lim=(0.386, 0.55),\n    final_dim=(256, 704),\n    bot_pct_lim=(0.0, 0.0),\n    rot_lim=(0.0, 0.0),\n    H=900,\n    W=1600,\n    rand_flip=True)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.25))),\n    weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.1,\n    min_lr_ratio=0.001)\nrunner = dict(type='IterBasedRunner', max_iters=1265850)\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "viewformer_r50_704x256_seq_90e.py"}
{"mode": "train", "epoch": 1, "iter": 140650, "lr": 5e-05, "memory": 11638, "data_time": 2.32416, "loss_prob": 0.29304, "loss_cls": 0.53151, "loss_lovasz": 0.5042, "d0.loss_v_depth": 0.4404, "d0.loss_v_cls": 0.31858, "d1.loss_v_depth": 0.44147, "d1.loss_v_cls": 0.31138, "loss": 2.84057, "grad_norm": 10.48678, "time": 5.61629}
{"mode": "train", "epoch": 1, "iter": 140651, "lr": 5e-05, "memory": 12144, "data_time": 0.00583, "loss_prob": 0.24865, "loss_cls": 0.35141, "loss_lovasz": 0.45548, "d0.loss_v_depth": 0.46422, "d0.loss_v_cls": 0.29673, "d1.loss_v_depth": 0.46359, "d1.loss_v_cls": 0.28928, "loss": 2.56937, "grad_norm": 11.75802, "time": 1.10668}
{"mode": "train", "epoch": 1, "iter": 140652, "lr": 5e-05, "memory": 12226, "data_time": 0.00711, "loss_prob": 0.25346, "loss_cls": 0.33542, "loss_lovasz": 0.42977, "d0.loss_v_depth": 0.44984, "d0.loss_v_cls": 0.30234, "d1.loss_v_depth": 0.45306, "d1.loss_v_cls": 0.28568, "loss": 2.50958, "grad_norm": 8.11274, "time": 1.15321}
{"mode": "train", "epoch": 1, "iter": 140653, "lr": 5e-05, "memory": 12352, "data_time": 0.00661, "loss_prob": 0.21826, "loss_cls": 0.31667, "loss_lovasz": 0.43098, "d0.loss_v_depth": 0.49968, "d0.loss_v_cls": 0.33666, "d1.loss_v_depth": 0.50611, "d1.loss_v_cls": 0.32985, "loss": 2.63822, "grad_norm": 11.58995, "time": 1.10897}
{"mode": "train", "epoch": 1, "iter": 140654, "lr": 5e-05, "memory": 12352, "data_time": 0.00833, "loss_prob": 0.20378, "loss_cls": 0.28888, "loss_lovasz": 0.39565, "d0.loss_v_depth": 0.48025, "d0.loss_v_cls": 0.27153, "d1.loss_v_depth": 0.48491, "d1.loss_v_cls": 0.26083, "loss": 2.38582, "grad_norm": 5.53953, "time": 1.14628}
{"mode": "train", "epoch": 1, "iter": 140655, "lr": 5e-05, "memory": 12352, "data_time": 0.00658, "loss_prob": 0.19632, "loss_cls": 0.2536, "loss_lovasz": 0.40298, "d0.loss_v_depth": 0.48523, "d0.loss_v_cls": 0.26724, "d1.loss_v_depth": 0.49421, "d1.loss_v_cls": 0.24793, "loss": 2.34752, "grad_norm": 4.86184, "time": 1.11982}
{"mode": "train", "epoch": 1, "iter": 140656, "lr": 5e-05, "memory": 12352, "data_time": 0.00492, "loss_prob": 0.20761, "loss_cls": 0.27218, "loss_lovasz": 0.42636, "d0.loss_v_depth": 0.49603, "d0.loss_v_cls": 0.33711, "d1.loss_v_depth": 0.50763, "d1.loss_v_cls": 0.33124, "loss": 2.57817, "grad_norm": 6.25834, "time": 1.10648}
{"mode": "train", "epoch": 1, "iter": 140657, "lr": 5e-05, "memory": 12352, "data_time": 0.00702, "loss_prob": 0.18499, "loss_cls": 0.24445, "loss_lovasz": 0.38859, "d0.loss_v_depth": 0.46561, "d0.loss_v_cls": 0.28949, "d1.loss_v_depth": 0.48472, "d1.loss_v_cls": 0.27701, "loss": 2.33486, "grad_norm": 4.60006, "time": 1.12119}
{"mode": "train", "epoch": 1, "iter": 140658, "lr": 5e-05, "memory": 12352, "data_time": 0.00687, "loss_prob": 0.20015, "loss_cls": 0.26519, "loss_lovasz": 0.41199, "d0.loss_v_depth": 0.49828, "d0.loss_v_cls": 0.38355, "d1.loss_v_depth": 0.51338, "d1.loss_v_cls": 0.383, "loss": 2.65554, "grad_norm": 6.54007, "time": 1.11909}
{"mode": "train", "epoch": 1, "iter": 140659, "lr": 5e-05, "memory": 12352, "data_time": 0.0066, "loss_prob": 0.18443, "loss_cls": 0.24712, "loss_lovasz": 0.36323, "d0.loss_v_depth": 0.52207, "d0.loss_v_cls": 0.30923, "d1.loss_v_depth": 0.53245, "d1.loss_v_cls": 0.30485, "loss": 2.46339, "grad_norm": 7.93982, "time": 2.68516}
{"mode": "train", "epoch": 1, "iter": 140660, "lr": 5e-05, "memory": 12352, "data_time": 0.00683, "loss_prob": 0.18604, "loss_cls": 0.20843, "loss_lovasz": 0.30271, "d0.loss_v_depth": 0.46842, "d0.loss_v_cls": 0.30849, "d1.loss_v_depth": 0.48164, "d1.loss_v_cls": 0.30125, "loss": 2.25697, "grad_norm": 5.45474, "time": 1.15975}
{"mode": "train", "epoch": 1, "iter": 140661, "lr": 5e-05, "memory": 12352, "data_time": 0.00707, "loss_prob": 0.18606, "loss_cls": 0.22303, "loss_lovasz": 0.34081, "d0.loss_v_depth": 0.4844, "d0.loss_v_cls": 0.32528, "d1.loss_v_depth": 0.50137, "d1.loss_v_cls": 0.32069, "loss": 2.38164, "grad_norm": 5.74065, "time": 1.09077}
{"mode": "train", "epoch": 1, "iter": 140662, "lr": 5e-05, "memory": 12352, "data_time": 0.00647, "loss_prob": 0.18494, "loss_cls": 0.19532, "loss_lovasz": 0.3974, "d0.loss_v_depth": 0.48974, "d0.loss_v_cls": 0.36653, "d1.loss_v_depth": 0.50097, "d1.loss_v_cls": 0.3343, "loss": 2.4692, "grad_norm": 6.26118, "time": 1.12788}
{"mode": "train", "epoch": 1, "iter": 140663, "lr": 5e-05, "memory": 12352, "data_time": 0.00902, "loss_prob": 0.19142, "loss_cls": 0.18946, "loss_lovasz": 0.32377, "d0.loss_v_depth": 0.42997, "d0.loss_v_cls": 0.33311, "d1.loss_v_depth": 0.44693, "d1.loss_v_cls": 0.29284, "loss": 2.20751, "grad_norm": 4.16341, "time": 1.10682}
{"mode": "train", "epoch": 1, "iter": 140664, "lr": 5e-05, "memory": 12352, "data_time": 0.00655, "loss_prob": 0.19097, "loss_cls": 0.17945, "loss_lovasz": 0.29537, "d0.loss_v_depth": 0.42146, "d0.loss_v_cls": 0.29652, "d1.loss_v_depth": 0.44432, "d1.loss_v_cls": 0.2935, "loss": 2.12159, "grad_norm": 4.19695, "time": 1.11749}
{"mode": "train", "epoch": 1, "iter": 140665, "lr": 5e-05, "memory": 12352, "data_time": 0.00682, "loss_prob": 0.18877, "loss_cls": 0.18784, "loss_lovasz": 0.34077, "d0.loss_v_depth": 0.44702, "d0.loss_v_cls": 0.28879, "d1.loss_v_depth": 0.4718, "d1.loss_v_cls": 0.27452, "loss": 2.19952, "grad_norm": 3.05955, "time": 1.12935}
{"mode": "train", "epoch": 1, "iter": 140666, "lr": 5e-05, "memory": 12352, "data_time": 0.00655, "loss_prob": 0.19864, "loss_cls": 0.18947, "loss_lovasz": 0.28239, "d0.loss_v_depth": 0.44521, "d0.loss_v_cls": 0.29205, "d1.loss_v_depth": 0.45656, "d1.loss_v_cls": 0.26784, "loss": 2.13216, "grad_norm": 4.11091, "time": 1.10635}
{"mode": "train", "epoch": 1, "iter": 140667, "lr": 5e-05, "memory": 12352, "data_time": 0.00654, "loss_prob": 0.20993, "loss_cls": 0.21314, "loss_lovasz": 0.30434, "d0.loss_v_depth": 0.45791, "d0.loss_v_cls": 0.28138, "d1.loss_v_depth": 0.47645, "d1.loss_v_cls": 0.26778, "loss": 2.21092, "grad_norm": 5.28106, "time": 1.13821}
{"mode": "train", "epoch": 1, "iter": 140668, "lr": 5e-05, "memory": 12352, "data_time": 0.01, "loss_prob": 0.19268, "loss_cls": 0.1894, "loss_lovasz": 0.26098, "d0.loss_v_depth": 0.45017, "d0.loss_v_cls": 0.23826, "d1.loss_v_depth": 0.47409, "d1.loss_v_cls": 0.2345, "loss": 2.04006, "grad_norm": 4.61431, "time": 1.10582}
{"mode": "train", "epoch": 1, "iter": 140669, "lr": 5e-05, "memory": 12352, "data_time": 0.0062, "loss_prob": 0.19405, "loss_cls": 0.19426, "loss_lovasz": 0.2756, "d0.loss_v_depth": 0.45774, "d0.loss_v_cls": 0.24964, "d1.loss_v_depth": 0.47471, "d1.loss_v_cls": 0.24213, "loss": 2.08812, "grad_norm": 6.27905, "time": 1.09807}
{"mode": "train", "epoch": 1, "iter": 140670, "lr": 5e-05, "memory": 12352, "data_time": 0.00657, "loss_prob": 0.30195, "loss_cls": 0.56628, "loss_lovasz": 0.4447, "d0.loss_v_depth": 0.54151, "d0.loss_v_cls": 0.39321, "d1.loss_v_depth": 0.52937, "d1.loss_v_cls": 0.36999, "loss": 3.14701, "grad_norm": 5.90203, "time": 1.09296}
{"mode": "train", "epoch": 1, "iter": 140671, "lr": 5e-05, "memory": 12352, "data_time": 0.0066, "loss_prob": 0.30185, "loss_cls": 0.56071, "loss_lovasz": 0.43768, "d0.loss_v_depth": 0.51822, "d0.loss_v_cls": 0.35782, "d1.loss_v_depth": 0.5094, "d1.loss_v_cls": 0.34704, "loss": 3.03273, "grad_norm": 6.51282, "time": 1.10339}
{"mode": "train", "epoch": 1, "iter": 140672, "lr": 5e-05, "memory": 12352, "data_time": 0.00641, "loss_prob": 0.30713, "loss_cls": 0.53349, "loss_lovasz": 0.42865, "d0.loss_v_depth": 0.48166, "d0.loss_v_cls": 0.37821, "d1.loss_v_depth": 0.4853, "d1.loss_v_cls": 0.36191, "loss": 2.97635, "grad_norm": 5.24798, "time": 2.62085}
{"mode": "train", "epoch": 1, "iter": 140673, "lr": 5e-05, "memory": 12352, "data_time": 1.47692, "loss_prob": 0.30824, "loss_cls": 0.57053, "loss_lovasz": 0.44192, "d0.loss_v_depth": 0.53699, "d0.loss_v_cls": 0.40165, "d1.loss_v_depth": 0.5423, "d1.loss_v_cls": 0.40246, "loss": 3.20409, "grad_norm": 8.87759, "time": 2.56383}
{"mode": "train", "epoch": 1, "iter": 140674, "lr": 5e-05, "memory": 12357, "data_time": 0.00632, "loss_prob": 0.29953, "loss_cls": 0.5349, "loss_lovasz": 0.40985, "d0.loss_v_depth": 0.55699, "d0.loss_v_cls": 0.35373, "d1.loss_v_depth": 0.55006, "d1.loss_v_cls": 0.34398, "loss": 3.04904, "grad_norm": 5.87435, "time": 1.09848}
{"mode": "train", "epoch": 1, "iter": 140675, "lr": 5e-05, "memory": 12357, "data_time": 0.00651, "loss_prob": 0.30654, "loss_cls": 0.50832, "loss_lovasz": 0.4059, "d0.loss_v_depth": 0.54641, "d0.loss_v_cls": 0.40419, "d1.loss_v_depth": 0.54375, "d1.loss_v_cls": 0.38739, "loss": 3.10249, "grad_norm": 5.7813, "time": 1.0942}
